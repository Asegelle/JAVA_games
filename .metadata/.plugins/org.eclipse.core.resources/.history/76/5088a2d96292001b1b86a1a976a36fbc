package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases vides

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);
			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (m, coordinatesJ1);
			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);

			do {
				// interroger J2 sur case à jouer
				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);
				// comparer aux cases precedemment jouées et re-interroge si déjà prise
				String [] coordinatesJ2v2 = LockCase (
						m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
						coordinatesJ2,
						PLAYER2);
				// determiner dans quelle case va le choix du joueur
				String[][] m5 = TurnPlayer2 (m3, coordinatesJ2v2);
				// renvoyer le tableau à afficher
				String [][] m6 = Grid(
						m5 [0][0], m5 [0][1], m5 [0][2], m5 [1][0], m5 [1][1], m5 [1][2], m5 [2][0], m5 [2][1], m5 [2][2]);
				// conditions de victoire J2
				isVictoryJ2 = Victory (
						m5 [0][0], m5 [0][1], m5 [0][2], m5 [1][0], m5 [1][1], m5 [1][2], m5 [2][0], m5 [2][1], m5 [2][2], 
						isVictoryJ2, PLAYER2);
				// conditions d'égalité
				isNull = Null (
						m5 [0][0], m5 [0][1], m5 [0][2], m5 [1][0], m5 [1][1], m5 [1][2], m5 [2][0], m5 [2][1], m5 [2][2], 
						isVictoryJ2);

				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer
					coordinatesJ1 = DisplayPlayer(PLAYER1);
					// comparer aux cases precedemment jouées et re-interroge si déjà prise
					String [] coordinatesJ1v2 = LockCase (
							m5 [0][0], m5 [0][1], m5 [0][2], m5 [1][0], m5 [1][1], m5 [1][2], m5 [2][0], m5 [2][1], m5 [2][2], 
							coordinatesJ1,
							PLAYER1);
					System.out.println("abs : "+coordinatesJ1v2[0]);
					System.out.println("abs : "+coordinatesJ1v2[1]);

					// determiner dans quelle case va le choix du joueur
					String[][] m7 = TurnPlayer1 (m5, coordinatesJ1v2);
					// renvoyer le tableau à afficher
					String [][] m8 = Grid(
							m7 [0][0], m7 [0][1], m7 [0][2], m7 [1][0], m7 [1][1], m7 [1][2], m7 [2][0], m7 [2][1], m7 [2][2]);
					// conditions de victoire J2
					isVictoryJ1 = Victory (
							m7 [0][0], m7 [0][1], m7 [0][2], m7 [1][0], m7 [1][1], m7 [1][2], m7 [2][0], m7 [2][1], m7 [2][2], 
							isVictoryJ1, PLAYER1);
					// conditions d'égalité
					isNull = Null (
							m7 [0][0], m7 [0][1], m7 [0][2], m7 [1][0], m7 [1][1], m7 [1][2], m7 [2][0], m7 [2][1], m7 [2][2], 
							isVictoryJ1);
				}
			}
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}



	// entrée de boucle pour répétition
	/*		do {
				// interroger J2 sur case à jouer
				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}

	 */






	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction prise en compte choix joueur --------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction prise en compte choix joueur J1 -----------------------------------------

	public static String[][] TurnPlayer1(
			String [][]gride, 
			String[] coordinateJ1) {

		System.out.println(	"before turnplayer abs "+coordinateJ1[0]);
		System.out.println(	"before turnplayer ord "+coordinateJ1[1]);

		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !gride[0][0].equals(P1_X)&& !gride[0][0].equals(P2_O)) {
			gride[0][0]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !gride[0][1].equals(P1_X)&& !gride[0][1].equals(P2_O)) 
		{
			gride[0][1]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !gride[0][2].equals(P1_X)&& !gride[0][2].equals(P2_O)) {
			gride[0][2]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !gride[1][0].equals(P1_X)&& !gride[1][0].equals(P2_O)) {
			gride[1][0]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !gride[1][1].equals(P1_X)&& !gride[1][1].equals(P2_O)) {
			gride[1][1]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !gride[1][2].equals(P1_X)&& !gride[1][2].equals(P2_O)) {
			gride[1][2]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !gride[2][0].equals(P1_X)&& !gride[2][0].equals(P2_O)) {
			gride[2][0]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !gride[2][1].equals(P1_X)&& !gride[2][1].equals(P2_O)) {
			gride[2][1]=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !gride[2][2].equals(P1_X)&& !gride[2][2].equals(P2_O)) {
			gride[2][2]=P1_X;
		}
		/*		else {
			System.out.println("erreur dans la saisie");	
		}*/

		System.out.println(	"1 "+gride[0][0]);
		System.out.println(	"1 "+gride[0][1]);
		System.out.println(	"1 "+gride[0][2]);
		System.out.println(	"1 "+gride[1][0]);
		System.out.println(	"1 "+gride[1][1]);
		System.out.println(	"1 "+gride[1][2]);
		System.out.println(	"1 "+gride[2][0]);
		System.out.println(	"1 "+gride[2][1]);
		System.out.println(	"1 "+gride[2][2]);


		return gride;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String [][]gride, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !gride[0][0].equals(P1_X)&& !gride[0][0].equals(P2_O)) {
			gride[0][0]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !gride[0][1].equals(P1_X)&& !gride[0][1].equals(P2_O)) {
			gride[0][1]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !gride[0][2].equals(P1_X)&& !gride[0][2].equals(P2_O)) {
			gride[0][2]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !gride[1][0].equals(P1_X)&& !gride[1][0].equals(P2_O)) {
			gride[1][0]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !gride[1][1].equals(P1_X)&& !gride[1][1].equals(P2_O)) {
			gride[1][1]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !gride[1][2].equals(P1_X)&& !gride[1][2].equals(P2_O)) {
			gride[1][2]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !gride[2][0].equals(P1_X)&& !gride[2][0].equals(P2_O)) {
			gride[2][0]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !gride[2][1].equals(P1_X)&& !gride[2][1].equals(P2_O)) {
			gride[2][1]=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !gride[2][2].equals(P1_X)&& !gride[2][2].equals(P2_O)) {
			gride[2][2]=P2_O;
		}
		/*		else {
			System.out.println("erreur dans la saisie");	
		}*/

		return gride;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		while	(
				(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
				(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
				(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
				(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
				(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
				(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
				(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
				(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
				(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
			System.out.println("cette case a déjà été sélectionnée !");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
			coordinates[0] = scanInput.nextLine();
			while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
				System.out.println("erreur dans la saisie");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
				coordinates[0] = scanInput.nextLine();		
			}
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();
			while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
				System.out.println("erreur dans la saisie");
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();		
			}
			System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
		}
		return (coordinates);
	}


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction conditions de victoire --------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static boolean Victory (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c,
			boolean isVictory,
			String player) {

		if	(
				(case1a.equals("o") && case1b.equals("o") && case1c.equals("o")) ||
				(case2a.equals("o") && case2b.equals("o") && case2c.equals("o")) ||
				(case3a.equals("o") && case3b.equals("o") && case3c.equals("o")) ||
				(case1a.equals("o") && case2a.equals("o") && case3a.equals("o")) ||
				(case1b.equals("o") && case2b.equals("o") && case3b.equals("o")) ||
				(case1c.equals("o") && case2c.equals("o") && case3c.equals("o")) ||
				(case1a.equals("o") && case2b.equals("o") && case3c.equals("o"))) {
			System.out.println("\nvictoire du joueur "+player+" !");
			isVictory = true;
		}

		return isVictory;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction conditions match nul --------------------------------------------------
	//---------------------------------------------------------------------------------------------------------		

	public static boolean Null (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c,
			boolean isNull) {

		if	(
				(case1a.equals("o") || case1a.equals("x")) && 
				(case1b.equals("o") || case1b.equals("x")) && 
				(case1c.equals("o") || case1c.equals("x")) && 
				(case2a.equals("o") || case2a.equals("x")) && 
				(case2b.equals("o") || case2b.equals("x")) && 
				(case2c.equals("o") || case2c.equals("x")) && 
				(case3a.equals("o") || case3a.equals("x")) && 
				(case3b.equals("o") || case3b.equals("x")) && 
				(case3c.equals("o") || case3c.equals("x"))) {
			System.out.println("\négalité !");
			isNull = true;	
		}
		return isNull;
	}
}














//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */
