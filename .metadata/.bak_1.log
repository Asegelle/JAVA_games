!SESSION 2021-03-31 18:39:36.173 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=13.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=fr_FR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\Users\ib\Documents\Eclipse_Workspace\.metadata\.bak_0.log
Created Time: 2021-03-31 19:13:45.298

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:45.302
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:45.316
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:45.366
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:45.378
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:45.390
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:50.533
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:50.550
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:50.562
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:50.583
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:50.598
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:50.613
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:50.697
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:50.715
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:50.732
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:52.595
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:52.616
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:52.635
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:55.992
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:56.014
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:56.036
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:57.291
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:57.315
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:57.340
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:57.370
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:57.397
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:57.424
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:57.456
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:57.486
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:57.515
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:13:58.307
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:13:58.349
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:13:58.382
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:01.000
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-03-31 19:14:01.038
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-03-31 19:14:01.073
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:04.390
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:04.427
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:04.463
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:07.025
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:07.068
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:07.106
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:07.836
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:07.877
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:07.917
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:13.071
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:13.115
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:13.158
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:21.132
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-03-31 19:14:21.178
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-03-31 19:14:21.225
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:21.282
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:21.332
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:21.382
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:22.855
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:22.908
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:22.959
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:23.077
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:23.130
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:23.183
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:23.784
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-03-31 19:14:23.840
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-03-31 19:14:23.895
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:23.950
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:24.009
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:24.067
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:25.040
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
	


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:25.100
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:25.160
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:27.961
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
		}


}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-03-31 19:14:28.025
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-03-31 19:14:28.088
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:29.165
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
		}
	}

}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-03-31 19:14:29.232
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-03-31 19:14:29.299
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:29.374
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		
		}
	}

}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:29.443
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:29.512
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:29.585
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
		}
	}

}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:29.656
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:29.726
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:29.817
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
		}
	}

}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-03-31 19:14:29.890
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-03-31 19:14:29.963
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-03-31 19:14:30.233
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package fr.ibformation.exos.bonus;

import java.util.Arrays;
import java.util.Scanner;

public class LauncherMorpionJcJ {


	public static String ORD_1 = "1", 
			ORD_2 = "2", 
			ORD_3 = "3";
	public static String ABS_A = "a",
			ABS_B = "b",
			ABS_C = "c";
	public static String P1_X = "x",
			P2_O = "o";
	public static String PLAYER1 = "J1",
			PLAYER2 = "J2";
	public static String EMPTY = " ";

	public static Scanner scanInput = new Scanner(System.in);



	public static void main(String[] args) {
		/*
		•Morpion JcJ (notions de tableaux) :
		Coder un jeu de morpion standard où 2 joueurs s'affrontent en plaçant dans une grille les symboles X ou O.		
		 */		

		// variable de boucle pour relancer le jeu 
		boolean retry = true;
		String abscissaJ1, ordinateJ1;
		System.out.println("Bienvenue dans le jeu du Morpion JcJ ! \n\nLe but du jeu est d’aligner avant son adversaire 3 symboles identiques horizontalement, verticalement ou en diagonale. Chaque joueur a donc son propre symbole, une croix pour le Joueur 1 et un rond pour le Joueur 2. La partie se termine quand l’un des 2 joueurs a aligner 3 symboles ou quand la grille est complétée sans vainqueur. Il y a alors égalité. Que le meilleur gagne !\n");
		do {
			// déclaration des variables
			boolean isVictoryJ1 = false;
			boolean isVictoryJ2 = false;
			boolean isNull = false;

			// fonction pour affichage de la grille
			// attribution des variables (le tableau)
			String [][] m = Grid(EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY);	//m = tableau morpion initial avec 9 cases

			// interroger J1 sur case à jouer
			String [] coordinatesJ1 = DisplayPlayer(PLAYER1);

			// determiner dans quelle case va le choix du joueur
			String[][] m2 = TurnPlayer1 (
					m [0][0], m [0][1], m [0][2], m [1][0], m [1][1], m [1][2], m [2][0], m [2][1], m [2][2], coordinatesJ1);

			// renvoyer le tableau à afficher
			String [][] m3 = Grid(
					m2 [0][0], m2 [0][1], m2 [0][2], m2 [1][0], m2 [1][1], m2 [1][2], m2 [2][0], m2 [2][1], m2 [2][2]);



			// interroger J2 sur case à jouer
			String [] coordinatesJ2 = DisplayPlayer(PLAYER2);

			// determiner dans quelle case va le choix du joueur
			String[][] m4 = TurnPlayer2 (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], coordinatesJ2);

			// verouiller la case jouée



			LockCase (
					m3 [0][0], m3 [0][1], m3 [0][2], m3 [1][0], m3 [1][1], m3 [1][2], m3 [2][0], m3 [2][1], m3 [2][2], 
					coordinatesJ2,
					PLAYER2);



			// renvoyer le tableau à afficher
			String [][] m5 = Grid(
					m4 [0][0], m4 [0][1], m4 [0][2], m4 [1][0], m4 [1][1], m4 [1][2], m4 [2][0], m4 [2][1], m4 [2][2]);
			// entrée de boucle pour répétition
			/*		do {
				// interroger J2 sur case à jouer



				String [] coordinatesJ2 = DisplayPlayer(PLAYER2);


				System.out.println("\nau tour du Joueur 2 : ");
				String abscissaJ2;
				System.out.println("saissisez un abscisse (a, b, c) :");
				abscissaJ2 = scanInput.nextLine();
				while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée (1, 2, 3):");
				String ordinateJ2 = scanInput.nextLine();
				while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();		
				}
				System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);

				// verouiller la case jouée
				while (
						(abscissaJ2.equals("a") && ordinateJ2.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
						(abscissaJ2.equals("a") && ordinateJ2.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
						(abscissaJ2.equals("b") && ordinateJ2.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
						(abscissaJ2.equals("c") && ordinateJ2.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {			
					System.out.println("cette case a déjà été sélectionnée !");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ2 = scanInput.nextLine();
					while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ2 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ2 = scanInput.nextLine();
					while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ2 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ2+" et ordonnée J2 : "+ordinateJ2);
				}

				// renvoyer le tableau à afficher
				morpionReturned = TurnPlayer2 (
						morpionReturned [0][0],
						morpionReturned [0][1],
						morpionReturned [0][2],
						morpionReturned [1][0],
						morpionReturned [1][1],
						morpionReturned [1][2],
						morpionReturned [2][0],
						morpionReturned [2][1],
						morpionReturned [2][2],
						abscissaJ2, ordinateJ2);

				System.out.println("   a  b  c ");		
				System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
				System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
				System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

				// conditions de victoire J2
				if	(
						(morpionReturned [0][0].equals("o") && morpionReturned [0][1].equals("o") && morpionReturned [0][2].equals("o")) ||
						(morpionReturned [1][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [1][2].equals("o")) ||
						(morpionReturned [2][0].equals("o") && morpionReturned [2][1].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][0].equals("o") && morpionReturned [2][0].equals("o")) ||
						(morpionReturned [0][1].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][1].equals("o")) ||
						(morpionReturned [0][2].equals("o") && morpionReturned [1][2].equals("o") && morpionReturned [2][2].equals("o")) ||
						(morpionReturned [0][0].equals("o") && morpionReturned [1][1].equals("o") && morpionReturned [2][2].equals("o"))) {
					System.out.println("\nvictoire du joueur 2 !");
					isVictoryJ2 = true;
				}
				// conditions d'égalité
				if (
						(morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && 
						(morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && 
						(morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && 
						(morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && 
						(morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && 
						(morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && 
						(morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && 
						(morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && 
						(morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
					System.out.println("\négalité !");
					isNull = true;	
				};
/*
				if (!isVictoryJ2 && !isNull) {
					// interroger J1 sur case à jouer (2eme fois)
					System.out.println("\nau tour du Joueur 1 : ");
					System.out.println("saissisez un abscisse (a, b, c) :");
					abscissaJ1 = scanInput.nextLine();
					while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();		
					}
					System.out.println("saissisez une ordonnée (1, 2, 3):");
					ordinateJ1 = scanInput.nextLine();		
					while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
						System.out.println("erreur dans la saisie");
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();		
					}
					System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);

					// verouiller la case jouée
					while (
							(abscissaJ1.equals("a") && ordinateJ1.equals("1") && (morpionReturned [0][0].equals("x") || morpionReturned [0][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("1") && (morpionReturned [0][1].equals("x") || morpionReturned [0][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("1") && (morpionReturned [0][2].equals("x") || morpionReturned [0][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("2") && (morpionReturned [1][0].equals("x") || morpionReturned [1][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("2") && (morpionReturned [1][1].equals("x") || morpionReturned [1][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("2") && (morpionReturned [1][2].equals("x") || morpionReturned [1][2].equals("o"))) || 
							(abscissaJ1.equals("a") && ordinateJ1.equals("3") && (morpionReturned [2][0].equals("x") || morpionReturned [2][0].equals("o"))) || 
							(abscissaJ1.equals("b") && ordinateJ1.equals("3") && (morpionReturned [2][1].equals("x") || morpionReturned [2][1].equals("o"))) || 
							(abscissaJ1.equals("c") && ordinateJ1.equals("3") && (morpionReturned [2][2].equals("x") || morpionReturned [2][2].equals("o")))) {	
						System.out.println("cette case a déjà été sélectionnée !");
						System.out.println("saissisez un abscisse (a, b, c) :");
						abscissaJ1 = scanInput.nextLine();
						while (!abscissaJ1.equals("a") && !abscissaJ1.equals("b") &&!abscissaJ1.equals("c")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez un abscisse (a, b, c) :");
							abscissaJ1 = scanInput.nextLine();		
						}
						System.out.println("saissisez une ordonnée (1, 2, 3):");
						ordinateJ1 = scanInput.nextLine();
						while (!ordinateJ1.equals("1") && !ordinateJ1.equals("2") &&!ordinateJ1.equals("3")) {
							System.out.println("erreur dans la saisie");
							System.out.println("saissisez une ordonnée (1, 2, 3):");
							ordinateJ1 = scanInput.nextLine();		
						}
						System.out.println("abscisse J2 : "+abscissaJ1+" et ordonnée J2 : "+ordinateJ1);
					}

					// renvoyer le tableau à afficher
					morpionReturned = TurnPlayer1 (
							morpionReturned [0][0],
							morpionReturned [0][1],
							morpionReturned [0][2],
							morpionReturned [1][0],
							morpionReturned [1][1],
							morpionReturned [1][2],
							morpionReturned [2][0],
							morpionReturned [2][1],
							morpionReturned [2][2],
							abscissaJ1, ordinateJ1);		
					System.out.println("   a  b  c ");		
					System.out.println("1 ["+morpionReturned [0][0]+"]["+morpionReturned [0][1]+"]["+morpionReturned [0][2]+"]  Joueur 1 : x");		
					System.out.println("2 ["+morpionReturned [1][0]+"]["+morpionReturned [1][1]+"]["+morpionReturned [1][2]+"]  Joueur 2 : o");		
					System.out.println("3 ["+morpionReturned [2][0]+"]["+morpionReturned [2][1]+"]["+morpionReturned [2][2]+"]");	

					// conditions de victoire J1
					if	(
							(morpionReturned [0][0].equals("x") && morpionReturned [0][1].equals("x") && morpionReturned [0][2].equals("x")) ||
							(morpionReturned [1][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [1][2].equals("x")) ||
							(morpionReturned [2][0].equals("x") && morpionReturned [2][1].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][0].equals("x") && morpionReturned [2][0].equals("x")) ||
							(morpionReturned [0][1].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][1].equals("x")) ||
							(morpionReturned [0][2].equals("x") && morpionReturned [1][2].equals("x") && morpionReturned [2][2].equals("x")) ||
							(morpionReturned [0][0].equals("x") && morpionReturned [1][1].equals("x") && morpionReturned [2][2].equals("x"))) {
						System.out.println("\nvictoire du joueur 1 !");
						isVictoryJ1 = true;
					}
					if ((morpionReturned [0][0].equals("o") || morpionReturned [0][0].equals("x")) && (morpionReturned [0][1].equals("o") || morpionReturned [0][1].equals("x")) && (morpionReturned [0][2].equals("o") || morpionReturned [0][2].equals("x")) && (morpionReturned [1][0].equals("o") || morpionReturned [1][0].equals("x")) && (morpionReturned [1][1].equals("o") || morpionReturned [1][1].equals("x")) && (morpionReturned [1][2].equals("o") || morpionReturned [1][2].equals("x")) && (morpionReturned [2][0].equals("o") || morpionReturned [2][0].equals("x")) && (morpionReturned [2][1].equals("o") || morpionReturned [2][1].equals("x")) && (morpionReturned [2][2].equals("o") || morpionReturned [2][2].equals("x"))) {
						System.out.println("\négalité !");
						isNull = true;	
					};
				}
			}*/
			// fin boucle de répétition
			// définition des conditions de sortie de boucle 
			while (!isVictoryJ1 && !isVictoryJ2 && !isNull);

			// relancer une partie
			System.out.println("\nvoulez vous rejouer ? (true/false)");
			Scanner scanRetry = new Scanner(System.in);
			retry = scanRetry.nextBoolean();
			if (retry == true) {
				System.out.println("bienvenue dans une nouvelle partie de Morpion JcJ ! \n");
			}
			else if (retry == false){
				System.out.println("A bientôt pour une nouvelle partie !");
				retry=false;
				scanRetry.close();}
		}
		while (retry);
	}








	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction affichage grille --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[][] Grid(
			String case1a,
			String case1b,
			String case1c,
			String case2a,
			String case2b,
			String case2c,
			String case3a,
			String case3b,
			String case3c) {

		String[][] morpionGrid = new String [3][3];
		morpionGrid [0][0] = case1a;
		morpionGrid [0][1] = case1b;
		morpionGrid [0][2] = case1c;
		morpionGrid [1][0] = case2a;
		morpionGrid [1][1] = case2b;
		morpionGrid [1][2] = case2c;
		morpionGrid [2][0] = case3a;
		morpionGrid [2][1] = case3b;
		morpionGrid [2][2] = case3c;

		System.out.println("   "+ABS_A+"  "+ABS_B+"  "+ABS_C+" ");		
		System.out.println(ORD_1+" ["+morpionGrid [0][0]+"]["+morpionGrid [0][1]+"]["+morpionGrid [0][2]+"]  Joueur 1 : "+P1_X);		
		System.out.println(ORD_2+" ["+morpionGrid [1][0]+"]["+morpionGrid [1][1]+"]["+morpionGrid [1][1]+"]  Joueur 2 : "+P2_O);		
		System.out.println(ORD_3+" ["+morpionGrid [2][0]+"]["+morpionGrid [2][1]+"]["+morpionGrid [2][2]+"]");	

		return morpionGrid; 
	}

	//---------------------------------------------------------------------------------------------------------
	// --------------------- fonction interroger Joueur sur case à jouer --------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] DisplayPlayer(
			String player) {	

		System.out.println("\nau tour du Joueur "+player+" : ");
		System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
		String []coordinates = new String [2];
		coordinates[0] = scanInput.nextLine();
		while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			coordinates[0] = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
		coordinates[1] = scanInput.nextLine();
		while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
			coordinates[1] = scanInput.nextLine();		
		}
		System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);

		return coordinates;
	}

	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction interrogé joueur --------------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	// --------------------- fonction interrogé joueur J1 -----------------------------------------------------

	public static String[][] TurnPlayer1(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ1) {


		if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) 
		{
			case1b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_2) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case2c=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_A) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3a=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_B) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3b=P1_X;
		}
		else if (coordinateJ1[0].equals(ABS_C) && coordinateJ1[1].equals(ORD_3) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case3c=P1_X;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer1 = new String [3][3];
		returnPlayer1[0][0]=case1a;
		returnPlayer1[0][1]=case1b;
		returnPlayer1[0][2]=case1c;
		returnPlayer1[1][0]=case2a;
		returnPlayer1[1][1]=case2b;
		returnPlayer1[1][2]=case2c;
		returnPlayer1[2][0]=case3a;
		returnPlayer1[2][1]=case3b;
		returnPlayer1[2][2]=case3c;

		return returnPlayer1;
	}	

	// --------------------- fonction interrogé joueur J2 -----------------------------------------------------

	public static String[][] TurnPlayer2(
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinateJ2) {

		if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_1) && !case1a.equals(P1_X)&& !case1a.equals(P2_O)) {
			case1a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_1) && !case1b.equals(P1_X)&& !case1b.equals(P2_O)) 
		{
			case1b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_1) && !case1c.equals(P1_X)&& !case1c.equals(P2_O)) {
			case1c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_2) && !case2a.equals(P1_X)&& !case2a.equals(P2_O)) {
			case2a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_2) && !case2b.equals(P1_X)&& !case2b.equals(P2_O)) {
			case2b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_2) && !case2c.equals(P1_X)&& !case2c.equals(P2_O)) {
			case2c=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_A) && coordinateJ2[1].equals(ORD_3) && !case3a.equals(P1_X)&& !case3a.equals(P2_O)) {
			case3a=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_B) && coordinateJ2[1].equals(ORD_3) && !case3b.equals(P1_X)&& !case3b.equals(P2_O)) {
			case3b=P2_O;
		}
		else if (coordinateJ2[0].equals(ABS_C) && coordinateJ2[1].equals(ORD_3) && !case3c.equals(P1_X)&& !case3c.equals(P2_O)) {
			case3c=P2_O;
		}
		else {
			System.out.println("erreur dans la saisie");	
		}
		String [][] returnPlayer2 = new String [3][3];
		returnPlayer2[0][0]=case1a;
		returnPlayer2[0][1]=case1b;
		returnPlayer2[0][2]=case1c;
		returnPlayer2[1][0]=case2a;
		returnPlayer2[1][1]=case2b;
		returnPlayer2[1][2]=case2c;
		returnPlayer2[2][0]=case3a;
		returnPlayer2[2][1]=case3b;
		returnPlayer2[2][2]=case3c;

		return returnPlayer2;
	}	


	//---------------------------------------------------------------------------------------------------------	
	// --------------------- fonction vérouiller case jouée ---------------------------------------------------
	//---------------------------------------------------------------------------------------------------------	

	public static String[] LockCase (
			String case1a, 
			String case1b, 
			String case1c, 
			String case2a, 
			String case2b, 
			String case2c, 
			String case3a, 
			String case3b, 
			String case3c, 
			String[] coordinates, 
			String player) {
		do {
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
					(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
					(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
					(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O)))) {			
				System.out.println("cette case a déjà été sélectionnée !");
				System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
			//	String []coordinates = new String [2];
				coordinates[0] = scanInput.nextLine();
				while (!coordinates[0].equals(ABS_A) && !coordinates[0].equals(ABS_B) &&!coordinates[0].equals(ABS_C)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
					coordinates[0] = scanInput.nextLine();		
				}
				System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
				coordinates[1] = scanInput.nextLine();
				while (!coordinates[1].equals(ORD_1) && !coordinates[1].equals(ORD_2) &&!coordinates[1].equals(ORD_3)) {
					System.out.println("erreur dans la saisie");
					System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
					coordinates[1] = scanInput.nextLine();		
				}
				System.out.println("abscisse "+player+" : "+coordinates[0]+" et ordonnée "+player+" : "+coordinates[1]);
			}
				while (
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_1) && (case1a.equals(P1_X) || case1a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_1) && (case1b.equals(P1_X) || case1b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_1) && (case1c.equals(P1_X) || case1c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_2) && (case2a.equals(P1_X) || case2a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_2) && (case2b.equals(P1_X) || case2b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_2) && (case2c.equals(P1_X) || case2c.equals(P2_O))) || 
						(coordinates[0].equals(ABS_A) && coordinates[1].equals(ORD_3) && (case3a.equals(P1_X) || case3a.equals(P2_O))) || 
						(coordinates[0].equals(ABS_B) && coordinates[1].equals(ORD_3) && (case3b.equals(P1_X) || case3b.equals(P2_O))) || 
						(coordinates[0].equals(ABS_C) && coordinates[1].equals(ORD_3) && (case3c.equals(P1_X) || case3c.equals(P2_O))));

			return (coordinates);
		}
		}
	}

}

//---------------------------------------------------------------------------------------------------------	
// --------------------- fonction si case déjà jouée ------------------------------------------------------
//---------------------------------------------------------------------------------------------------------	
/*
public static void AlreadyUsedJ2 (String abscissaJ2, String ordinateJ2) {
	Scanner scanInput = new Scanner(System.in);

		System.out.println("cette case a déjà été sélectionnée !");
		System.out.println("saissisez un abscisse (a, b, c) :");
		abscissaJ2 = scanInput.nextLine();
		while (!abscissaJ2.equals("a") && !abscissaJ2.equals("b") &&!abscissaJ2.equals("c")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez un abscisse (a, b, c) :");
			abscissaJ2 = scanInput.nextLine();		
		}
		System.out.println("saissisez une ordonnée (1, 2, 3):");
		ordinateJ2 = scanInput.nextLine();
		while (!ordinateJ2.equals("1") && !ordinateJ2.equals("2") &&!ordinateJ2.equals("3")) {
			System.out.println("erreur dans la saisie");
			System.out.println("saissisez une ordonnée (1, 2, 3):");
			ordinateJ2 = scanInput.nextLine();		
		}
		System.out.println("abscisse J : "+abscissaJ2+" et ordonnée J : "+ordinateJ2);

	}	
 */







}




//	System.out.println("abscisse J1 : "+coordinatesJ1[0]+" et ordonnée J1 : "+coordinatesJ1[1]);
//	String abscissaJ1New = Arrays.toString(coordinatesJ1);
/*		
System.out.println("\nau tour du Joueur 1 : ");
System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
abscissaJ1 = scanInput.nextLine();
while (!abscissaJ1.equals(ABS_A) && !abscissaJ1.equals(ABS_B) &&!abscissaJ1.equals(ABS_C)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez un abscisse ("+ABS_A+", "+ABS_B+", "+ABS_C+") :");
	abscissaJ1 = scanInput.nextLine();		
}
System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
ordinateJ1 = scanInput.nextLine();
while (!ordinateJ1.equals(ORD_1) && !ordinateJ1.equals(ORD_2) &&!ordinateJ1.equals(ORD_3)) {
	System.out.println("erreur dans la saisie");
	System.out.println("saissisez une ordonnée ("+ORD_1+", "+ORD_2+", "+ORD_3+"):");
	ordinateJ1 = scanInput.nextLine();		
}
System.out.println("abscisse J1 : "+abscissaJ1+" et ordonnée J1 : "+ordinateJ1);
 */

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2011)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1739)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2956)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
